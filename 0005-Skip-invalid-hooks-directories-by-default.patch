From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Sascha Grunert <sgrunert@suse.com>
Date: Wed, 5 Feb 2020 09:36:59 +0100
Subject: [PATCH] Skip invalid hooks directories by default

If a specified or the default hooks directory is not available, then we
warn the user but do not fail any more.

Fixes: #3179

Signed-off-by: Sascha Grunert <sgrunert@suse.com>
---
 completions/fish/crio.fish      |  2 ++
 docs/crio.8.md                  |  2 ++
 internal/pkg/criocli/criocli.go |  2 ++
 pkg/config/config.go            |  8 +++++++-
 pkg/config/config_test.go       | 25 ++++++++-----------------
 pkg/config/template.go          |  3 ++-
 6 files changed, 23 insertions(+), 19 deletions(-)

diff --git a/completions/fish/crio.fish b/completions/fish/crio.fish
index f43aff1..743bfc3 100644
--- a/completions/fish/crio.fish
+++ b/completions/fish/crio.fish
@@ -46,6 +46,8 @@ complete -c crio -n '__fish_crio_no_subcommand' -l global-auth-file -r -d 'Path
 complete -c crio -n '__fish_crio_no_subcommand' -f -l grpc-max-recv-msg-size -r -d 'Maximum grpc receive message size in bytes'
 complete -c crio -n '__fish_crio_no_subcommand' -f -l grpc-max-send-msg-size -r -d 'Maximum grpc receive message size'
 complete -c crio -n '__fish_crio_no_subcommand' -f -l hooks-dir -r -d 'Set the OCI hooks directory path (may be set multiple times) (default: ["/usr/share/containers/oci/hooks.d"])
+    If one of the directories does not exist, then CRI-O will automatically
+    skip them.
     Each \'\*.json\' file in the path configures a hook for CRI-O
     containers. For more details on the syntax of the JSON files and
     the semantics of hook injection, see \'oci-hooks(5)\'. CRI-O
diff --git a/docs/crio.8.md b/docs/crio.8.md
index d46fcab..984c55e 100644
--- a/docs/crio.8.md
+++ b/docs/crio.8.md
@@ -175,6 +175,8 @@ crio [GLOBAL OPTIONS] command [COMMAND OPTIONS] [ARGUMENTS...]
 **--help, -h**: show help
 
 **--hooks-dir**="": Set the OCI hooks directory path (may be set multiple times) (default: ["/usr/share/containers/oci/hooks.d"])
+    If one of the directories does not exist, then CRI-O will automatically
+    skip them.
     Each '\*.json' file in the path configures a hook for CRI-O
     containers. For more details on the syntax of the JSON files and
     the semantics of hook injection, see 'oci-hooks(5)'. CRI-O
diff --git a/internal/pkg/criocli/criocli.go b/internal/pkg/criocli/criocli.go
index 03961af..523c1bc 100644
--- a/internal/pkg/criocli/criocli.go
+++ b/internal/pkg/criocli/criocli.go
@@ -517,6 +517,8 @@ func getCrioFlags(defConf *libconfig.Config, systemContext *types.SystemContext)
 		&cli.StringSliceFlag{
 			Name: "hooks-dir",
 			Usage: fmt.Sprintf("Set the OCI hooks directory path (may be set multiple times) (default: %q)", defConf.HooksDir) + `
+    If one of the directories does not exist, then CRI-O will automatically
+    skip them.
     Each '\*.json' file in the path configures a hook for CRI-O
     containers. For more details on the syntax of the JSON files and
     the semantics of hook injection, see 'oci-hooks(5)'. CRI-O
diff --git a/pkg/config/config.go b/pkg/config/config.go
index 53715b5..1c25b30 100644
--- a/pkg/config/config.go
+++ b/pkg/config/config.go
@@ -736,11 +736,17 @@ func (c *RuntimeConfig) Validate(systemContext *types.SystemContext, onExecution
 			return errors.Wrapf(err, "invalid registries")
 		}
 
+		// Sort out invalid hooks directories
+		hooksDirs := []string{}
 		for _, hooksDir := range c.HooksDir {
 			if err := utils.IsDirectory(hooksDir); err != nil {
-				return errors.Wrapf(err, "invalid hooks_dir: %s", err)
+				logrus.Warnf("skipping invalid hooks directory: %v", err)
+				continue
 			}
+			logrus.Debugf("using  hooks directory: %s", hooksDir)
+			hooksDirs = append(hooksDirs, hooksDir)
 		}
+		c.HooksDir = hooksDirs
 
 		// Validate the conmon path
 		if err := c.ValidateConmonPath("conmon"); err != nil {
diff --git a/pkg/config/config_test.go b/pkg/config/config_test.go
index 6eec5a0..601dcc3 100644
--- a/pkg/config/config_test.go
+++ b/pkg/config/config_test.go
@@ -210,39 +210,30 @@ var _ = t.Describe("Config", func() {
 				RuntimeType: config.DefaultRuntimeType,
 			}
 			sut.Conmon = validFilePath
-			sut.HooksDir = []string{validDirPath}
+			sut.HooksDir = []string{validDirPath, validDirPath, validDirPath}
 
 			// When
 			err := sut.RuntimeConfig.Validate(nil, true)
 
 			// Then
 			Expect(err).To(BeNil())
+			Expect(sut.HooksDir).To(HaveLen(3))
 		})
 
-		It("should fail on invalid hooks directory", func() {
-			// Given
-			sut.Runtimes["runc"] = &config.RuntimeHandler{RuntimePath: validFilePath}
-			sut.Conmon = validFilePath
-			sut.HooksDir = []string{invalidPath}
-
-			// When
-			err := sut.RuntimeConfig.Validate(nil, true)
-
-			// Then
-			Expect(err).NotTo(BeNil())
-		})
-
-		It("should fail if the hooks directory is not a directory", func() {
+		It("should sort out invalid hooks directories", func() {
 			// Given
 			sut.Runtimes["runc"] = &config.RuntimeHandler{RuntimePath: validFilePath}
 			sut.Conmon = validFilePath
-			sut.HooksDir = []string{validFilePath}
+			sut.PinnsPath = validFilePath
+			sut.NamespacesDir = os.TempDir()
+			sut.HooksDir = []string{invalidPath, validDirPath, validDirPath}
 
 			// When
 			err := sut.RuntimeConfig.Validate(nil, true)
 
 			// Then
-			Expect(err).NotTo(BeNil())
+			Expect(err).To(BeNil())
+			Expect(sut.HooksDir).To(HaveLen(2))
 		})
 
 		It("should fail on invalid conmon path", func() {
diff --git a/pkg/config/template.go b/pkg/config/template.go
index eded949..e7722f2 100644
--- a/pkg/config/template.go
+++ b/pkg/config/template.go
@@ -157,7 +157,8 @@ default_sysctls = [
 additional_devices = [
 {{ range $device := .AdditionalDevices}}{{ printf "\t%q, \n" $device}}{{ end }}]
 
-# Path to OCI hooks directories for automatically executed hooks.
+# Path to OCI hooks directories for automatically executed hooks. If one of the
+# directories does not exist, then CRI-O will automatically skip them.
 hooks_dir = [
 {{ range $hooksDir := .HooksDir }}{{ printf "\t%q, \n" $hooksDir}}{{ end }}]
 
